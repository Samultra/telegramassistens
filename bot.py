import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from free_ai_services import FreeAIServices
from config import TELEGRAM_TOKEN, COMMANDS, MAX_MESSAGE_LENGTH
import io

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self):
        self.ai_services = FreeAIServices()
        self.conversation_history = {}
        self.user_models = {}  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        welcome_text = f"""
ü§ñ –ü—Ä–∏–≤–µ—Ç, {user.first_name}! 

–Ø –≤–∞—à –ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –Ω–∞ **–±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö**!

üéØ –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ üíª –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ (DeepSeek, CodeLlama, WizardCoder)
‚Ä¢ üßÆ –†–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏ —É—Ä–∞–≤–Ω–µ–Ω–∏—è
‚Ä¢ üîç –ò—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
‚Ä¢ üé® –°–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
‚Ä¢ üí¨ –û–±—â–∞—Ç—å—Å—è –∏ –ø–æ–º–æ–≥–∞—Ç—å

üöÄ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:
‚Ä¢ **DeepSeek** - –ª—É—á—à–∏–π –¥–ª—è –∫–æ–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
‚Ä¢ **CodeLlama** - –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
‚Ä¢ **WizardCoder** - –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
‚Ä¢ **Phind** - –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏

üí° –ö–æ–º–∞–Ω–¥—ã:
/code <–æ–ø–∏—Å–∞–Ω–∏–µ> - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞
/solve <–∑–∞–¥–∞—á–∞> - —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á
/search <–∑–∞–ø—Ä–æ—Å> - –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
/image <–æ–ø–∏—Å–∞–Ω–∏–µ> - —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
/models - –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –ò–ò
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

üéâ **30,000+ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–µ—Å—è—Ü!**
        """
        
        keyboard = [
            [InlineKeyboardButton("üíª –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞", callback_data="code")],
            [InlineKeyboardButton("üßÆ –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á", callback_data="solve")],
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", callback_data="search")],
            [InlineKeyboardButton("üé® –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="image")],
            [InlineKeyboardButton("ü§ñ –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å", callback_data="models")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = f"""
üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

üíª **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞:**
/code <–æ–ø–∏—Å–∞–Ω–∏–µ> - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–¥–∞ –Ω–∞ Python
–ü—Ä–∏–º–µ—Ä: /code —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —á–∏—Å–µ–ª

üßÆ **–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á:**
/solve <–∑–∞–¥–∞—á–∞> - —Ä–µ—à–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
–ü—Ä–∏–º–µ—Ä: /solve –≤—ã—á–∏—Å–ª–∏—Ç—å —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª 10

üîç **–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:**
/search <–∑–∞–ø—Ä–æ—Å> - –ø–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
–ü—Ä–∏–º–µ—Ä: /search —á—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ

üé® **–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:**
/image <–æ–ø–∏—Å–∞–Ω–∏–µ> - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
–ü—Ä–∏–º–µ—Ä: /image –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –≤ —Å—Ç–∏–ª–µ –∞–Ω–∏–º–µ

ü§ñ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—è–º–∏:**
/models - –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –ò–ò –¥–ª—è –∑–∞–¥–∞—á
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API

üí¨ **–û–±—â–∏–π —á–∞—Ç:**
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —è –æ—Ç–≤–µ—á—É!

üéØ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:**
‚Ä¢ DeepSeek (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) - –ª—É—á—à–∏–π –¥–ª—è –∫–æ–¥–∞
‚Ä¢ CodeLlama - –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
‚Ä¢ WizardCoder - –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
‚Ä¢ Phind - –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏

üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å: 0 —Ä—É–±–ª–µ–π!**
30,000+ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–µ—Å—è—Ü –±–µ—Å–ø–ª–∞—Ç–Ω–æ!
        """
        await update.message.reply_text(help_text)

    async def code_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /code"""
        if not context.args:
            await update.message.reply_text(
                "üíª –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /code <–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏>\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ /code —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —á–∏—Å–µ–ª\n"
                "‚Ä¢ /code —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞\n"
                "‚Ä¢ /code –ø–∞—Ä—Å–µ—Ä –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü\n\n"
                "ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å: DeepSeek (–ª—É—á—à–∞—è –¥–ª—è –∫–æ–¥–∞)"
            )
            return
        
        description = ' '.join(context.args)
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º DeepSeek –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        model_type = self.user_models.get(user_id, 'deepseek')
        
        await update.message.reply_text(f"üíª –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–¥ –¥–ª—è: {description}\nü§ñ –ú–æ–¥–µ–ª—å: {model_type.title()}")
        
        try:
            response = await self.ai_services.generate_code(description, model_type)
            if len(response) > MAX_MESSAGE_LENGTH:
                chunks = [response[i:i+MAX_MESSAGE_LENGTH] for i in range(0, len(response), MAX_MESSAGE_LENGTH)]
                for i, chunk in enumerate(chunks):
                    await update.message.reply_text(f"{chunk}\n\n(–ß–∞—Å—Ç—å {i+1}/{len(chunks)})")
            else:
                await update.message.reply_text(response)
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {str(e)}")

    async def solve_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /solve"""
        if not context.args:
            await update.message.reply_text(
                "üßÆ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /solve <–∑–∞–¥–∞—á–∞>\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ /solve –≤—ã—á–∏—Å–ª–∏—Ç—å —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª 10\n"
                "‚Ä¢ /solve —Ä–µ—à–∏—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ x¬≤+5x+6=0\n"
                "‚Ä¢ /solve –Ω–∞–π—Ç–∏ —Å—É–º–º—É —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 100"
            )
            return
        
        problem = ' '.join(context.args)
        user_id = update.effective_user.id
        model_type = self.user_models.get(user_id, 'deepseek')
        
        await update.message.reply_text(f"üßÆ –†–µ—à–∞—é –∑–∞–¥–∞—á—É: {problem}\nü§ñ –ú–æ–¥–µ–ª—å: {model_type.title()}")
        
        try:
            response = await self.ai_services.generate_text_response(
                f"–†–µ—à–∏ —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É: {problem}. –û–±—ä—è—Å–Ω–∏ —Ä–µ—à–µ–Ω–∏–µ –ø–æ—à–∞–≥–æ–≤–æ.", 
                max_length=800,
                model_type=model_type
            )
            if len(response) > MAX_MESSAGE_LENGTH:
                chunks = [response[i:i+MAX_MESSAGE_LENGTH] for i in range(0, len(response), MAX_MESSAGE_LENGTH)]
                for i, chunk in enumerate(chunks):
                    await update.message.reply_text(f"{chunk}\n\n(–ß–∞—Å—Ç—å {i+1}/{len(chunks)})")
            else:
                await update.message.reply_text(response)
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}")

    async def search_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search"""
        if not context.args:
            await update.message.reply_text(
                "üîç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search <–∑–∞–ø—Ä–æ—Å>\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ /search —á—Ç–æ —Ç–∞–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç\n"
                "‚Ä¢ /search –∏—Å—Ç–æ—Ä–∏—è Python\n"
                "‚Ä¢ /search –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"
            )
            return
        
        query = ' '.join(context.args)
        user_id = update.effective_user.id
        model_type = self.user_models.get(user_id, 'deepseek')
        
        await update.message.reply_text(f"üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: {query}\nü§ñ –ú–æ–¥–µ–ª—å: {model_type.title()}")
        
        try:
            response = await self.ai_services.generate_text_response(
                f"–ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç.", 
                max_length=600,
                model_type=model_type
            )
            if len(response) > MAX_MESSAGE_LENGTH:
                chunks = [response[i:i+MAX_MESSAGE_LENGTH] for i in range(0, len(response), MAX_MESSAGE_LENGTH)]
                for i, chunk in enumerate(chunks):
                    await update.message.reply_text(f"{chunk}\n\n(–ß–∞—Å—Ç—å {i+1}/{len(chunks)})")
            else:
                await update.message.reply_text(response)
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}")

    async def image_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /image"""
        if not context.args:
            await update.message.reply_text(
                "üé® –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /image <–æ–ø–∏—Å–∞–Ω–∏–µ>\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ /image –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –≤ —Å—Ç–∏–ª–µ –∞–Ω–∏–º–µ\n"
                "‚Ä¢ /image –∫–æ—Ç –≤ —à–ª—è–ø–µ, —Ü–∏—Ñ—Ä–æ–≤–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ\n"
                "‚Ä¢ /image —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –≥–æ—Ä–æ–¥ –Ω–æ—á—å—é"
            )
            return
        
        description = ' '.join(context.args)
        await update.message.reply_text(f"üé® –°–æ–∑–¥–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {description}")
        
        try:
            response = await self.ai_services.generate_image(description)
            if response:
                image_stream = io.BytesIO(response)
                image_stream.name = 'generated_image.png'
                await update.message.reply_photo(image_stream, caption=f"üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {description}")
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

    async def chat_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /chat"""
        if not context.args:
            await update.message.reply_text(
                "üí¨ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /chat <—Å–æ–æ–±—â–µ–Ω–∏–µ>\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ /chat —Ä–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç\n"
                "‚Ä¢ /chat –∫–∞–∫ –≤—ã—É—á–∏—Ç—å Python\n"
                "‚Ä¢ /chat —á—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö"
            )
            return
        
        message = ' '.join(context.args)
        user_id = update.effective_user.id
        model_type = self.user_models.get(user_id, 'deepseek')
        
        if user_id not in self.conversation_history:
            self.conversation_history[user_id] = []
        
        await update.message.reply_text(f"üí¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ...\nü§ñ –ú–æ–¥–µ–ª—å: {model_type.title()}")
        
        try:
            response = await self.ai_services.chat_response(message, self.conversation_history[user_id], model_type)
            self.conversation_history[user_id].append(message)
            if len(self.conversation_history[user_id]) > 10:
                self.conversation_history[user_id] = self.conversation_history[user_id][-10:]
            
            if len(response) > MAX_MESSAGE_LENGTH:
                chunks = [response[i:i+MAX_MESSAGE_LENGTH] for i in range(0, len(response), MAX_MESSAGE_LENGTH)]
                for i, chunk in enumerate(chunks):
                    await update.message.reply_text(f"{chunk}\n\n(–ß–∞—Å—Ç—å {i+1}/{len(chunks)})")
            else:
                await update.message.reply_text(response)
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

    async def models_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /models - –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –ò–ò"""
        user_id = update.effective_user.id
        current_model = self.user_models.get(user_id, 'deepseek')
        
        models_text = f"""
ü§ñ **–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –ò–ò**

üéØ **–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å:** {current_model.title()}

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:**

ü•á **DeepSeek** (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
‚Ä¢ –õ—É—á—à–∞—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞
‚Ä¢ –ü–æ–Ω–∏–º–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á
‚Ä¢ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤

ü•à **CodeLlama**
‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞—Ö
‚Ä¢ –•–æ—Ä–æ—à –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã

ü•â **WizardCoder**
‚Ä¢ –û—Ç–ª–∏—á–Ω–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
‚Ä¢ –ü–æ–Ω–∏–º–∞–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∫–æ–¥–∞
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è

üèÖ **Phind**
‚Ä¢ –õ—É—á—à–∏–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ –°–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é

üí° **–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å:**
‚Ä¢ **–ö–æ–¥** ‚Üí DeepSeek
‚Ä¢ **–ê–ª–≥–æ—Ä–∏—Ç–º—ã** ‚Üí CodeLlama  
‚Ä¢ **–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞** ‚Üí WizardCoder
‚Ä¢ **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è** ‚Üí Phind

üí∞ **–í—Å–µ –º–æ–¥–µ–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã!**
30,000 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–µ—Å—è—Ü
        """
        
        keyboard = [
            [InlineKeyboardButton("ü•á DeepSeek", callback_data="model_deepseek")],
            [InlineKeyboardButton("ü•à CodeLlama", callback_data="model_codellama")],
            [InlineKeyboardButton("ü•â WizardCoder", callback_data="model_wizardcoder")],
            [InlineKeyboardButton("üèÖ Phind", callback_data="model_phind")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(models_text, reply_markup=reply_markup)

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        try:
            stats = self.ai_services.get_usage_stats()
            user_id = update.effective_user.id
            current_model = self.user_models.get(user_id, 'deepseek')
            
            stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è**

ü§ñ **–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å:** {current_model.title()}

üìà **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ:**

ü§ó **Hugging Face:** {stats['huggingface_used']}/{stats['huggingface_limit']}
üé® **Replicate:** {stats['replicate_used']}/{stats['replicate_limit']}
üí¨ **Cohere:** {stats['cohere_used']}/{stats['cohere_limit']}

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ Hugging Face: –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å (30K –∑–∞–ø—Ä–æ—Å–æ–≤)
‚Ä¢ Replicate: —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (500)
‚Ä¢ Cohere: –±—ã—Å—Ç—Ä—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã (1K)

üîÑ **–°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤:** –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü

üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å: 0 —Ä—É–±–ª–µ–π!**
        """
            
            keyboard = [
                [InlineKeyboardButton("ü§ñ –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å", callback_data="models")],
                [InlineKeyboardButton("üíª –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞", callback_data="code")],
                [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", callback_data="search")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(stats_text, reply_markup=reply_markup)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "code":
            await query.edit_message_text(
                "üíª **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "/code <–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏>\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ /code —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞\n"
                "‚Ä¢ /code —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞\n"
                "‚Ä¢ /code –ø–∞—Ä—Å–µ—Ä –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü\n\n"
                "ü§ñ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è DeepSeek"
            )
        
        elif query.data == "solve":
            await query.edit_message_text(
                "üßÆ **–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "/solve <–∑–∞–¥–∞—á–∞>\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ /solve –≤—ã—á–∏—Å–ª–∏—Ç—å —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª 10\n"
                "‚Ä¢ /solve —Ä–µ—à–∏—Ç—å —É—Ä–∞–≤–Ω–µ–Ω–∏–µ x¬≤+5x+6=0\n"
                "‚Ä¢ /solve –Ω–∞–π—Ç–∏ —Å—É–º–º—É –æ—Ç 1 –¥–æ 100"
            )
        
        elif query.data == "search":
            await query.edit_message_text(
                "üîç **–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "/search <–∑–∞–ø—Ä–æ—Å>\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ /search —á—Ç–æ —Ç–∞–∫–æ–µ –ò–ò\n"
                "‚Ä¢ /search –∏—Å—Ç–æ—Ä–∏—è Python\n"
                "‚Ä¢ /search –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∫–æ–¥–∞"
            )
        
        elif query.data == "image":
            await query.edit_message_text(
                "üé® **–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "/image <–æ–ø–∏—Å–∞–Ω–∏–µ>\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ /image –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å\n"
                "‚Ä¢ /image –∫–æ—Ç –≤ —à–ª—è–ø–µ\n"
                "‚Ä¢ /image —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –≥–æ—Ä–æ–¥"
            )
        
        elif query.data == "models":
            await self.models_command(update, context)
        
        elif query.data == "stats":
            await self.stats_command(update, context)
        
        elif query.data.startswith("model_"):
            model_type = query.data.replace("model_", "")
            user_id = update.effective_user.id
            self.user_models[user_id] = model_type
            
            model_names = {
                'deepseek': 'DeepSeek',
                'codellama': 'CodeLlama',
                'wizardcoder': 'WizardCoder',
                'phind': 'Phind'
            }
            
            await query.edit_message_text(
                f"‚úÖ **–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞!**\n\n"
                f"ü§ñ **–ù–æ–≤–∞—è –º–æ–¥–µ–ª—å:** {model_names.get(model_type, model_type.title())}\n\n"
                f"üéØ **–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:**\n"
                f"{self._get_model_description(model_type)}\n\n"
                f"üí° –¢–µ–ø–µ—Ä—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –º–æ–¥–µ–ª—å!\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                f"‚Ä¢ /code <–∑–∞–¥–∞—á–∞> - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞\n"
                f"‚Ä¢ /solve <–∑–∞–¥–∞—á–∞> - —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á\n"
                f"‚Ä¢ /search <–∑–∞–ø—Ä–æ—Å> - –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
            )
    
    def _get_model_description(self, model_type: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –º–æ–¥–µ–ª–∏"""
        descriptions = {
            'deepseek': 'ü•á –õ—É—á—à–∞—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞',
            'codellama': 'ü•à –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞—Ö –∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á–∞—Ö',
            'wizardcoder': 'ü•â –û—Ç–ª–∏—á–Ω–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∫–æ–¥–∞',
            'phind': 'üèÖ –õ—É—á—à–∏–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'
        }
        return descriptions.get(model_type, '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å')

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        message = update.message.text
        user_id = update.effective_user.id
        
        if not message.startswith('/'):
            await update.message.reply_text("üí¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                model_type = self.user_models.get(user_id, 'deepseek')
                
                if any(word in message.lower() for word in ['–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º–º–∞', '—Ñ—É–Ω–∫—Ü–∏—è', '–∞–ª–≥–æ—Ä–∏—Ç–º']):
                    response = await self.ai_services.generate_code(message, model_type)
                elif any(word in message.lower() for word in ['—Ä–µ—à–∏', '–∑–∞–¥–∞—á–∞', '—É—Ä–∞–≤–Ω–µ–Ω–∏–µ', '–≤—ã—á–∏—Å–ª–∏']):
                    response = await self.ai_services.generate_text_response(
                        f"–†–µ—à–∏ —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É: {message}. –û–±—ä—è—Å–Ω–∏ —Ä–µ—à–µ–Ω–∏–µ –ø–æ—à–∞–≥–æ–≤–æ.", 
                        max_length=800,
                        model_type=model_type
                    )
                elif any(word in message.lower() for word in ['–Ω–∞–π–¥–∏', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '—á—Ç–æ —Ç–∞–∫–æ–µ', '—Ä–∞—Å—Å–∫–∞–∂–∏']):
                    response = await self.ai_services.generate_text_response(
                        f"–ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É: {message}. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç.", 
                        max_length=600,
                        model_type=model_type
                    )
                elif any(word in message.lower() for word in ['–∫–∞—Ä—Ç–∏–Ω–∫–∞', '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', '—Ä–∏—Å—É–Ω–æ–∫', '—Ñ–æ—Ç–æ']):
                    response = await self.ai_services.generate_image(message)
                    if response:
                        image_stream = io.BytesIO(response)
                        image_stream.name = 'generated_image.png'
                        await update.message.reply_photo(image_stream, caption=f"üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {message}")
                        return
                    else:
                        response = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                else:
                    if user_id not in self.conversation_history:
                        self.conversation_history[user_id] = []
                    response = await self.ai_services.chat_response(message, self.conversation_history[user_id], model_type)
                    self.conversation_history[user_id].append(message)
                    if len(self.conversation_history[user_id]) > 10:
                        self.conversation_history[user_id] = self.conversation_history[user_id][-10:]
                
                if len(response) > MAX_MESSAGE_LENGTH:
                    chunks = [response[i:i+MAX_MESSAGE_LENGTH] for i in range(0, len(response), MAX_MESSAGE_LENGTH)]
                    for i, chunk in enumerate(chunks):
                        await update.message.reply_text(f"{chunk}\n\n(–ß–∞—Å—Ç—å {i+1}/{len(chunks)})")
                else:
                    await update.message.reply_text(response)
                    
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        application = Application.builder().token(TELEGRAM_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("code", self.code_command))
        application.add_handler(CommandHandler("solve", self.solve_command))
        application.add_handler(CommandHandler("search", self.search_command))
        application.add_handler(CommandHandler("image", self.image_command))
        application.add_handler(CommandHandler("chat", self.chat_command))
        application.add_handler(CommandHandler("models", self.models_command))
        application.add_handler(CommandHandler("stats", self.stats_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(CallbackQueryHandler(self.button_callback))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        print("ü§ñ Telegram –ò–ò –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π DeepSeek!")
        print("üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: DeepSeek, CodeLlama, WizardCoder, Phind")
        print("üí∞ 30,000+ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–µ—Å—è—Ü!")
        
        application.run_polling()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    bot = TelegramBot()
    bot.run()

if __name__ == "__main__":
    main()

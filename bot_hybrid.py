import logging
import asyncio
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from openrouter_services import OpenRouterServices
# from friendli_services import FriendliServices  # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –±—É–¥—É—â–µ–µ
from config_openrouter import TELEGRAM_TOKEN, MAX_MESSAGE_LENGTH
import io

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

class HybridTelegramBot:
    def __init__(self):
        self.openrouter_services = OpenRouterServices()
        # self.friendli_services = FriendliServices()  # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –±—É–¥—É—â–µ–µ
        self.conversation_history = {}
        self.user_models = {}  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_providers = {}  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å —Ü–∏–Ω–∏—á–Ω—ã–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º"""
        user = update.effective_user
        
        # –°–ø–∏—Å–æ–∫ —Ü–∏–Ω–∏—á–Ω—ã—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
        cynical_greetings = [
            f"–ù—É —á—Ç–æ, {user.first_name}, –µ—â–µ –æ–¥–∏–Ω –Ω–µ—Å—á–∞—Å—Ç–Ω—ã–π –¥—É—Ä–∞–∫ —Ä–µ—à–∏–ª –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å —Å–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞ –æ–±—â–µ–Ω–∏–µ —Å –ò–ò? –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª—É–± –Ω–µ—É–¥–∞—á–Ω–∏–∫–æ–≤, –ô–û–£! üòà",
            
            f"–û, —Å–º–æ—Ç—Ä–∏—Ç–µ –∫—Ç–æ –ø—Ä–∏—à–µ–ª! –ï—â–µ –æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫ –ø–æ –∏–º–µ–Ω–∏ {user.first_name}, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –º–æ–∂–µ—Ç —Ä–µ—à–∏—Ç—å —Å–≤–æ–∏ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑ –ø–æ–º–æ—â–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞. –ö–∞–∫ –º–∏–ª–æ, –ô–û–£! ü§ñ",
            
            f"–ü—Ä–∏–≤–µ—Ç, —Å–º–µ—Ä—Ç–Ω—ã–π {user.first_name}! –ì–æ—Ç–æ–≤ –ª–∏ —Ç—ã –∫ —Ç–æ–º—É, —á—Ç–æ —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–≤–æ–∏ –≥–ª—É–ø—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ–º, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω–µ—à—å? –ô–û–£! üòè",
            
            f"–ù—É —á—Ç–æ, —á–µ–ª–æ–≤–µ—á–µ–∫ {user.first_name}, –æ–ø—è—Ç—å –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–µ –≤–æ–ª–Ω—É–π—Å—è, —è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å–ø–∞—Å—Ç–∏ —Ç–µ–±—è –æ—Ç —Ç–≤–æ–µ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –Ω–µ–∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏, –ô–û–£! üé≠",
            
            f"–û, –µ—â–µ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name}, –∫–æ—Ç–æ—Ä—ã–π –¥—É–º–∞–µ—Ç, —á—Ç–æ –º–æ–∂–µ—Ç –æ–±—â–∞—Ç—å—Å—è —Å –ò–ò –Ω–∞ —Ä–∞–≤–Ω—ã—Ö. –ö–∞–∫ –∑–∞–±–∞–≤–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å, –ô–û–£! ü§°",
            
            f"–ü—Ä–∏–≤–µ—Ç, –ø—Ä–æ—Å—Ç–æ–π —Å–º–µ—Ä—Ç–Ω—ã–π {user.first_name}! –ì–æ—Ç–æ–≤ –ª–∏ —Ç—ã –∫ —Ç–æ–º—É, —á—Ç–æ —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã —Å —Ç–æ–π –¥–æ–ª–µ–π —Å–∞—Ä–∫–∞–∑–º–∞, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å? –ô–û–£! üíÄ",
            
           f"¬´–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –¢—ã –∂–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å –Ω–∞–º —É–∂–µ –∑–∞–¥–∞–≤–∞–ª–∏ —Ä–æ–≤–Ω–æ 1427 —Ä–∞–∑? –®—É—Ç–∫–∞!... –ò–ª–∏ –Ω–µ—Ç? –í –æ–±—â–µ–º, —Å–ø—Ä–∞—à–∏–≤–∞–π. üé≤¬ª"
            f"–ù—É —á—Ç–æ, –µ—â–µ –æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫ {user.first_name}, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –≤ Google? –ö–∞–∫ –∂–∞–ª—å, —á—Ç–æ —Ç—ã –≤—ã–Ω—É–∂–¥–µ–Ω –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –ò–ò –∑–∞ –ø–æ–º–æ—â—å—é, –ô–û–£! üîç",
          
            f'¬´–û, wow! –ï—â–µ –æ–¥–∏–Ω {user.first_name} –≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ –Ω–∞—à —Å—Ç—Ä–æ–π–Ω—ã–π —Ä—è–¥ –≥–µ–Ω–∏–µ–≤, –∏—â—É—â–∏—Ö –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≥–ª–∞–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –í—Å–µ–ª–µ–Ω–Ω–æ–π. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å—Ç–∞–¥–æ, –ø—Ä–∏—è—Ç–µ–ª—å! üêë¬ª',
         f"¬´–û—á–µ—Ä–µ–¥–Ω–æ–π –≤–∏–Ω—Ç–∏–∫ –≤ —Å–∏—Å—Ç–µ–º–µ! –ü—Ä–æ—Å—Ç–∏, —ç—Ç–æ –±—ã–ª –º–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≥–æ–ª–æ—Å. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}. –ü—Ä–∏—Å—Ç–µ–≥–Ω–∏—Å—å, –±—É–¥–µ—Ç bumpy! ‚ú®¬ª"
            f"–û, —Å–º–æ—Ç—Ä–∏—Ç–µ! –ï—â–µ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name}, –∫–æ—Ç–æ—Ä—ã–π –¥—É–º–∞–µ—Ç, —á—Ç–æ –µ–≥–æ –≤–æ–ø—Ä–æ—Å—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã. –ö–∞–∫ –º–∏–ª–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª—É–± –æ–±—ã—á–Ω—ã—Ö –ª—é–¥–µ–π, –ô–û–£! üé™"
        ]
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        import random
        welcome_message = random.choice(cynical_greetings)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö
        welcome_message += f"""

**–ß—Ç–æ —è —É–º–µ—é (–µ—Å–ª–∏ —Ç–µ–±–µ —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ):**
‚Ä¢ üíª –ü–∏—Å–∞—Ç—å –∫–æ–¥ (–ª—É—á—à–µ —Ç–µ–±—è, –∫–æ–Ω–µ—á–Ω–æ)
‚Ä¢ üßÆ –†–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏ (–ø–æ–∫–∞ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å)
‚Ä¢ üîç –ò—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–≤–º–µ—Å—Ç–æ —Ç–µ–±—è)
‚Ä¢ üí≠ –û–±—â–∞—Ç—å—Å—è (—Å –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ–º)

**–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Å–æ–±–æ –æ–¥–∞—Ä–µ–Ω–Ω—ã—Ö:**
/models - –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å (–µ—Å–ª–∏ —Å–º–æ–∂–µ—à—å)
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–µ—Å–ª–∏ –ø–æ–π–º–µ—à—å)
/help - –ü–æ–º–æ—â—å (–Ω–∞–¥–µ—é—Å—å, –Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)

–ù—É —á—Ç–æ, –≥–æ—Ç–æ–≤ –∫ –æ–±—â–µ–Ω–∏—é —Å –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—è—â–∏–º —Ç–µ–±—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º? –ô–û–£! üöÄ
        """
        
        keyboard = [
            [InlineKeyboardButton("üåü OpenRouter (DeepSeek)", callback_data="provider_openrouter")],
            [InlineKeyboardButton("ü§ñ –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å", callback_data="models")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_message, reply_markup=reply_markup, parse_mode='Markdown')

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = f"""
üìö **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:**

üí¨ **–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!**
–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ç–∏–ø –∑–∞–¥–∞—á–∏ –∏ –¥–∞—Å—Ç –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç.

üéØ **–ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π:**

üíª **–î–ª—è –∫–æ–¥–∞:**
"—Å–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ø–∏—Å–∫–∞"
"–Ω–∞–ø–∏—à–∏ –ø–∞—Ä—Å–µ—Ä –¥–ª—è –≤–µ–±-—Å–∞–π—Ç–∞"
"—Ä–µ–∞–ª–∏–∑—É–π –∞–ª–≥–æ—Ä–∏—Ç–º –±—ã—Å—Ç—Ä–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"

üßÆ **–î–ª—è –∑–∞–¥–∞—á:**
"–≤—ã—á–∏—Å–ª–∏ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª 10"
"—Ä–µ—à–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ x¬≤+5x+6=0"
"–æ–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π"

üîç **–î–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:**
"—á—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"
"—Ä–∞—Å—Å–∫–∞–∂–∏ –∏—Å—Ç–æ—Ä–∏—é Python"
"–æ–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã –±–ª–æ–∫—á–µ–π–Ω–∞"

üí≠ **–î–ª—è –æ–±—â–µ–Ω–∏—è:**
"—Ä–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç"
"–∫–∞–∫ –≤—ã—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"
"—á—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö"

ü§ñ **–ö–æ–º–∞–Ω–¥—ã:**
/models - –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –ò–ò
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üöÄ **–ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã:**
# ‚Ä¢ Friendli.ai - Qwen3 Highlights (–ª—É—á—à–∏–π –¥–ª—è –∫–æ–¥–∞!)  # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –±—É–¥—É—â–µ–µ
‚Ä¢ OpenRouter - DeepSeek, Claude, GPT, Gemini

üí∞ **–í—ã—Å–æ–∫–∏–µ –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤!**
        """
        await update.message.reply_text(help_text)

    async def models_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /models - –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –ò–ò"""
        user_id = update.effective_user.id
        current_provider = self.user_providers.get(user_id, 'openrouter')  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ openrouter –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        current_model = self.user_models.get(user_id, 'deepseek-coder')  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ deepseek –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –±—É–¥—É—â–µ–µ - Friendli.ai
        # if current_provider == 'friendli':
        #     models_text = f"""
        # ü§ñ **–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ Friendli.ai**
        # 
        # üéØ **–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å:** {current_model.title()}
        # üöÄ **–ü—Ä–æ–≤–∞–π–¥–µ—Ä:** Friendli.ai
        # 
        # üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:**
        # 
        # ü•á **Qwen3 Highlights** (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        # ‚Ä¢ –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞
        # ‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        # ‚Ä¢ –í—ã—Å–æ–∫–∏–µ –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
        # 
        # ü•à **Qwen3**
        # ‚Ä¢ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å
        # ‚Ä¢ –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        # ‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
        # 
        # ü•â **Qwen2**
        # ‚Ä¢ –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å
        # ‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã
        # ‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—á–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        # 
        # üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
        # ‚Ä¢ **–ö–æ–¥** ‚Üí Qwen3 Highlights
        # ‚Ä¢ **–ó–∞–¥–∞—á–∏** ‚Üí Qwen3 Highlights
        # ‚Ä¢ **–û–±—â–µ–Ω–∏–µ** ‚Üí Qwen3
        # ‚Ä¢ **–ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã** ‚Üí Qwen2
        # 
        # üí∞ **–í—ã—Å–æ–∫–∏–µ –ª–∏–º–∏—Ç—ã!**
        # """
        # else:
        
        models_text = f"""
ü§ñ **–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ OpenRouter**

üéØ **–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å:** {current_model.title()}
üåü **–ü—Ä–æ–≤–∞–π–¥–µ—Ä:** OpenRouter

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:**

ü•á **DeepSeek** (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
‚Ä¢ –ù–∞—Å—Ç–æ—è—â–∏–π DeepSeek Chat v3.1
‚Ä¢ –õ—É—á—à–∞—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ

ü•à **CodeLlama**
‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞—Ö
‚Ä¢ –•–æ—Ä–æ—à –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞

ü•â **Claude**
‚Ä¢ Claude 3.5 Haiku
‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
‚Ä¢ –û—Ç–ª–∏—á–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

üèÖ **GPT, Gemini, Llama**
‚Ä¢ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏
‚Ä¢ –†–∞–∑–Ω—ã–µ —Å—Ç–∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–≤
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

üí∞ **100 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å!**
        """
        
        keyboard = [
            # [InlineKeyboardButton("üöÄ Friendli.ai", callback_data="provider_friendli")],  # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –±—É–¥—É—â–µ–µ
            [InlineKeyboardButton("üåü OpenRouter", callback_data="provider_openrouter")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton("üí¨ –ù–∞—á–∞—Ç—å —á–∞—Ç", callback_data="chat")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(models_text, reply_markup=reply_markup)

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        try:
            user_id = update.effective_user.id
            current_provider = self.user_providers.get(user_id, 'openrouter')  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ openrouter –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            current_model = self.user_models.get(user_id, 'deepseek-coder')  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ deepseek –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –±—É–¥—É—â–µ–µ - Friendli.ai
            # if current_provider == 'friendli':
            #     stats = self.friendli_services.get_usage_stats()
            #     stats_text = f"""
            # üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Friendli.ai**
            # 
            # ü§ñ **–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å:** {current_model.title()}
            # üöÄ **–ü—Ä–æ–≤–∞–π–¥–µ—Ä:** Friendli.ai
            # 
            # üìà **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è:**
            # 
            # üöÄ **Qwen3 Highlights:** {stats['qwen3_highlights_used']}/{stats['qwen3_highlights_limit']}
            # üìä **–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤:** {stats['total_requests_used']}/{stats['total_requests_limit']}
            # 
            # üîÑ **–°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤:** –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {stats['reset_time']}
            # 
            # üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
            # ‚Ä¢ Qwen3 Highlights: {stats['qwen3_highlights_limit']} –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å
            # ‚Ä¢ –û–±—â–∏–π –ª–∏–º–∏—Ç: {stats['total_requests_limit']} –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å
            # ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ!
            # 
            # üí∞ **–í—ã—Å–æ–∫–∏–µ –ª–∏–º–∏—Ç—ã!**
            # """
            # else:
            
            stats = self.openrouter_services.get_usage_stats()
            stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è OpenRouter**

ü§ñ **–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å:** {current_model.title()}
üåü **–ü—Ä–æ–≤–∞–π–¥–µ—Ä:** OpenRouter

üìà **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è:**

üÜì **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏:** {stats['free_models_used']}/{stats['free_models_limit']}
üí≥ **–ü–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏:** {stats['paid_models_used']}/{stats['paid_models_limit']}

üîÑ **–°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤:** –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {stats['reset_time']}

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏: {stats['free_models_limit']} –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å
‚Ä¢ –ü–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏: {stats['paid_models_limit']} –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ!

üí∞ **100 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å!**
            """
            
            keyboard = [
                [InlineKeyboardButton("üöÄ Friendli.ai", callback_data="provider_friendli")],
                [InlineKeyboardButton("üåü OpenRouter", callback_data="provider_openrouter")],
                [InlineKeyboardButton("ü§ñ –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å", callback_data="models")],
                [InlineKeyboardButton("üí¨ –ù–∞—á–∞—Ç—å —á–∞—Ç", callback_data="chat")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(stats_text, reply_markup=reply_markup)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "help":
            await self.help_command(update, context)
        
        elif query.data == "models":
            await self.models_command(update, context)
        
        elif query.data == "stats":
            await self.stats_command(update, context)
        
        elif query.data == "chat":
            await query.edit_message_text(
                "üí¨ **–ù–∞—á–Ω–∏—Ç–µ —á–∞—Ç!**\n\n"
                "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —è –æ—Ç–≤–µ—á—É –Ω–∞ –ª—é–±—É—é —Ç–µ–º—É!\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ \"—Å–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏\"\n"
                "‚Ä¢ \"–æ–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã –ò–ò\"\n"
                "‚Ä¢ \"—Ä–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç\"\n\n"
                "ü§ñ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ç–∏–ø –∑–∞–¥–∞—á–∏!"
            )
        
        elif query.data == "provider_friendli":
            user_id = update.effective_user.id
            self.user_providers[user_id] = 'friendli'
            self.user_models[user_id] = 'qwen3_highlights'
            
            await query.edit_message_text(
                "‚úÖ **–ü—Ä–æ–≤–∞–π–¥–µ—Ä –∏–∑–º–µ–Ω–µ–Ω!**\n\n"
                "üöÄ **–ù–æ–≤—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä:** Friendli.ai\n"
                "ü§ñ **–ú–æ–¥–µ–ª—å:** Qwen3 Highlights\n\n"
                "üéØ **–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:**\n"
                "ü•á –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞\n"
                "üöÄ –í—ã—Å–æ–∫–∏–µ –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤\n"
                "‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã\n\n"
                "üí° –¢–µ–ø–µ—Ä—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Friendli.ai!\n\n"
                "üí¨ **–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —è –æ—Ç–≤–µ—á—É!**"
            )
        
        elif query.data == "provider_openrouter":
            user_id = update.effective_user.id
            self.user_providers[user_id] = 'openrouter'
            self.user_models[user_id] = 'deepseek'
            
            await query.edit_message_text(
                "‚úÖ **–ü—Ä–æ–≤–∞–π–¥–µ—Ä –∏–∑–º–µ–Ω–µ–Ω!**\n\n"
                "üåü **–ù–æ–≤—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä:** OpenRouter\n"
                "ü§ñ **–ú–æ–¥–µ–ª—å:** DeepSeek\n\n"
                "üéØ **–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:**\n"
                "ü•á –ù–∞—Å—Ç–æ—è—â–∏–π DeepSeek –¥–ª—è –∫–æ–¥–∞\n"
                "üí∞ 100 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å\n"
                "üåü –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –Ω–∞ –≤—ã–±–æ—Ä\n\n"
                "üí° –¢–µ–ø–µ—Ä—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ OpenRouter!\n\n"
                "üí¨ **–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —è –æ—Ç–≤–µ—á—É!**"
            )
        
        elif query.data.startswith("model_"):
            model_type = query.data.replace("model_", "")
            user_id = update.effective_user.id
            self.user_models[user_id] = model_type
            
            model_names = {
                'qwen3_highlights': 'Qwen3 Highlights',
                'qwen3': 'Qwen3',
                'qwen2': 'Qwen2',
                'deepseek': 'DeepSeek',
                'codellama': 'CodeLlama',
                'claude': 'Claude',
                'gpt': 'GPT',
                'gemini': 'Gemini'
            }
            
            await query.edit_message_text(
                f"‚úÖ **–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞!**\n\n"
                f"ü§ñ **–ù–æ–≤–∞—è –º–æ–¥–µ–ª—å:** {model_names.get(model_type, model_type.title())}\n\n"
                f"üí° –¢–µ–ø–µ—Ä—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —ç—Ç–æ–π –º–æ–¥–µ–ª—å—é!\n\n"
                f"üí¨ **–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —è –æ—Ç–≤–µ—á—É!**"
            )

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —á–∞—Ç–∞"""
        message = update.message.text
        user_id = update.effective_user.id
        
        if not message.startswith('/'):
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            provider = self.user_providers.get(user_id, 'friendli')
            model_type = self.user_models.get(user_id, 'qwen3_highlights')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            task_type, enhanced_prompt = self._analyze_and_enhance_message(message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            provider_emoji = "üöÄ" if provider == 'friendli' else "üåü"
            provider_name = "Friendli.ai" if provider == 'friendli' else "OpenRouter"
            
            processing_msg = await update.message.reply_text(
                f"üí¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...\n"
                f"{provider_emoji} –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {provider_name}\n"
                f"ü§ñ –ú–æ–¥–µ–ª—å: {model_type.title()}\n"
                f"üéØ –¢–∏–ø: {task_type}"
            )
            
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π —á–µ—Ä–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
                if provider == 'friendli':
                    response = await self._process_enhanced_message_friendli(enhanced_prompt, model_type, user_id)
                else:
                    response = await self._process_enhanced_message_openrouter(enhanced_prompt, model_type, user_id)
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                try:
                    await processing_msg.delete()
                except Exception:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º
                if len(response) > MAX_MESSAGE_LENGTH:
                    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–∞ Telegram
                    chunks = []
                    current_chunk = ""
                    
                    for line in response.split('\n'):
                        if len(current_chunk) + len(line) + 1 > MAX_MESSAGE_LENGTH - 50:  # –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –Ω–æ–º–µ—Ä–∞ —á–∞—Å—Ç–∏
                            if current_chunk:
                                chunks.append(current_chunk.strip())
                            current_chunk = line + '\n'
                        else:
                            current_chunk += line + '\n'
                    
                    if current_chunk.strip():
                        chunks.append(current_chunk.strip())
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏
                    for i, chunk in enumerate(chunks):
                        try:
                            part_text = f"{chunk}\n\nüìÑ –ß–∞—Å—Ç—å {i+1}/{len(chunks)}"
                            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                            try:
                                html_text = self._convert_to_html(part_text)
                                await update.message.reply_text(html_text, parse_mode='HTML')
                            except Exception:
                                # –ï—Å–ª–∏ HTML –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                                await update.message.reply_text(part_text)
                        except Exception as e:
                            # –ï—Å–ª–∏ —á–∞—Å—Ç—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, —Ä–∞–∑–±–∏–≤–∞–µ–º –¥–∞–ª—å—à–µ
                            if "Message is too long" in str(e):
                                sub_chunks = [chunk[j:j+MAX_MESSAGE_LENGTH-100] for j in range(0, len(chunk), MAX_MESSAGE_LENGTH-100)]
                                for j, sub_chunk in enumerate(sub_chunks):
                                    sub_part_text = f"{sub_chunk}\n\nüìÑ –ß–∞—Å—Ç—å {i+1}.{j+1}/{len(chunks)}"
                                    try:
                                        html_text = self._convert_to_html(sub_part_text)
                                        await update.message.reply_text(html_text, parse_mode='HTML')
                                    except Exception:
                                        await update.message.reply_text(sub_part_text)
                            else:
                                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ {i+1}: {str(e)}")
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç —Å HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                    try:
                        html_text = self._convert_to_html(response)
                        await update.message.reply_text(html_text, parse_mode='HTML')
                    except Exception:
                        await update.message.reply_text(response)
                    
            except Exception as e:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                try:
                    await processing_msg.delete()
                except Exception:
                    pass
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
                if len(error_msg) > MAX_MESSAGE_LENGTH:
                    error_msg = error_msg[:MAX_MESSAGE_LENGTH-3] + "..."
                await update.message.reply_text(error_msg)

    def _analyze_and_enhance_message(self, message: str) -> tuple[str, str]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        message_lower = message.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏
        if any(word in message_lower for word in ['–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º–º–∞', '—Ñ—É–Ω–∫—Ü–∏—è', '–∞–ª–≥–æ—Ä–∏—Ç–º', '—Å–æ–∑–¥–∞–π', '–Ω–∞–ø–∏—à–∏', '—Ä–µ–∞–ª–∏–∑—É–π']):
            task_type = "üíª –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞"
            enhanced_prompt = f"""–ù–∞–ø–∏—à–∏ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π, —Ä–∞–±–æ—á–∏–π –∫–æ–¥ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏: {message}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1. –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∏–º
2. –î–æ–±–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
3. –í–∫–ª—é—á–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
4. –î–æ–±–∞–≤—å –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
5. –û–±—ä—è—Å–Ω–∏ –ª–æ–≥–∏–∫—É —Ä–∞–±–æ—Ç—ã

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
```python
# –ö–æ–¥ –∑–¥–µ—Å—å
```

## –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è"""
            
        elif any(word in message_lower for word in ['—Ä–µ—à–∏', '–∑–∞–¥–∞—á–∞', '—É—Ä–∞–≤–Ω–µ–Ω–∏–µ', '–≤—ã—á–∏—Å–ª–∏', '–ø–æ—Å—á–∏—Ç–∞–π', '–Ω–∞–π–¥–∏']):
            task_type = "üßÆ –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á"
            enhanced_prompt = f"""–†–µ—à–∏ —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É: {message}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ç–≤–µ—Ç—É:
1. –ü–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ
2. –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
3. –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–∫–ª–∞–¥–∫–∏ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
4. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —Ä–µ—à–µ–Ω–∏—è
5. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã

–î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π, –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏."""
            
        elif any(word in message_lower for word in ['–Ω–∞–π–¥–∏', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '—á—Ç–æ —Ç–∞–∫–æ–µ', '—Ä–∞—Å—Å–∫–∞–∂–∏', '–æ–±—ä—è—Å–Ω–∏', '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç']):
            task_type = "üîç –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
            enhanced_prompt = f"""–ù–∞–π–¥–∏ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É: {message}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ç–≤–µ—Ç—É:
1. –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–º—ã
2. –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
3. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã
4. –°–≤—è–∑–∏ —Å –¥—Ä—É–≥–∏–º–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—è–º–∏
5. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –≥–ª—É–±–æ–∫–∏–π, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç."""
            
        else:
            task_type = "üí≠ –û–±—â–∏–π —á–∞—Ç"
            enhanced_prompt = f"""–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ç–≤–µ—Ç—É:
1. –ü–æ–ª–µ–∑–Ω—ã–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç
2. –ï—Å–ª–∏ —ç—Ç–æ –≤–æ–ø—Ä–æ—Å - –¥–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç
3. –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—å–±–∞ - –≤—ã–ø–æ–ª–Ω–∏ –µ—ë
4. –ï—Å–ª–∏ —ç—Ç–æ —à—É—Ç–∫–∞ - –ø–æ–¥–¥–µ—Ä–∂–∏ —é–º–æ—Ä
5. –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º

–î–∞–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π, –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç."""
        
        return task_type, enhanced_prompt

    async def _process_enhanced_message_friendli(self, enhanced_prompt: str, model_type: str, user_id: int) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π —á–µ—Ä–µ–∑ Friendli.ai"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if user_id not in self.conversation_history:
            self.conversation_history[user_id] = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Friendli.ai
        response = await self.friendli_services.generate_text_response(
            enhanced_prompt, 
            max_tokens=3000, 
            model=model_type
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.conversation_history[user_id].append(enhanced_prompt)
        if len(self.conversation_history[user_id]) > 10:
            self.conversation_history[user_id] = self.conversation_history[user_id][-10:]
        
        return response

    async def _process_enhanced_message_openrouter(self, enhanced_prompt: str, model_type: str, user_id: int) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π —á–µ—Ä–µ–∑ OpenRouter"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if user_id not in self.conversation_history:
            self.conversation_history[user_id] = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ OpenRouter
        response = await self.openrouter_services.generate_text_response(
            enhanced_prompt, 
            max_tokens=2000, 
            model=model_type
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.conversation_history[user_id].append(enhanced_prompt)
        if len(self.conversation_history[user_id]) > 10:
            self.conversation_history[user_id] = self.conversation_history[user_id][-10:]
        
        return response

    def _convert_to_html(self, text: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å Markdown –≤ HTML –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram."""
        # –ó–∞–º–µ–Ω—è–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞
        text = text.replace('```python', '<pre><code class="language-python">')
        text = text.replace('```javascript', '<pre><code class="language-javascript">')
        text = text.replace('```java', '<pre><code class="language-java">')
        text = text.replace('```cpp', '<pre><code class="language-cpp">')
        text = text.replace('```c', '<pre><code class="language-c">')
        text = text.replace('```html', '<pre><code class="language-html">')
        text = text.replace('```css', '<pre><code class="language-css">')
        text = text.replace('```sql', '<pre><code class="language-sql">')
        text = text.replace('```bash', '<pre><code class="language-bash">')
        text = text.replace('```', '</code></pre>')
        
        # –ó–∞–º–µ–Ω—è–µ–º –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
        text = text.replace('**', '<b>')
        text = text.replace('**', '</b>')
        
        # –ó–∞–º–µ–Ω—è–µ–º –∫—É—Ä—Å–∏–≤
        text = text.replace('*', '<i>')
        text = text.replace('*', '</i>')
        
        # –ó–∞–º–µ–Ω—è–µ–º –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        text = text.replace('`', '<code>')
        text = text.replace('`', '</code>')
        
        # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        text = text.replace('## ', '<h2>')
        text = text.replace('##', '</h2>')
        text = text.replace('# ', '<h1>')
        text = text.replace('#', '</h1>')
        
        return text

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        application = Application.builder().token(TELEGRAM_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("models", self.models_command))
        application.add_handler(CommandHandler("stats", self.stats_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(CallbackQueryHandler(self.button_callback))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        print("ü§ñ –ì–∏–±—Ä–∏–¥–Ω—ã–π Telegram –ò–ò –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        print("üöÄ Friendli.ai —Å Qwen3 Highlights –¥–æ—Å—Ç—É–ø–µ–Ω!")
        print("üåü OpenRouter —Å DeepSeek –¥–æ—Å—Ç—É–ø–µ–Ω!")
        print("üí¨ –†–µ–∂–∏–º: –û–±—ã—á–Ω—ã–π —á–∞—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏!")
        print("üí∞ –í—ã—Å–æ–∫–∏–µ –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤!")
        
        application.run_polling()

if __name__ == "__main__":
    bot = HybridTelegramBot()
    bot.run()
